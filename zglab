#!/usr/bin/env python3

# Copyright Â© 2022-2023 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import contextlib
import gzip
import html.parser
import io
import json
import os
import re
import shutil
import signal
import subprocess
import sys
import urllib.parse
import urllib.request

lambda x, /: 0  # Python >= 3.8 is required

text_width = int(os.getenv('ZGLAB_COLUMNS', '78'))

class HTTPRedirectHandler(urllib.request.HTTPRedirectHandler):

    def redirect_request(self, req, fp, code, msg, headers, newurl):
        sign_in_url = '/users/sign_in'
        if newurl.endswith(sign_in_url):
            raise RuntimeError(f'{req.full_url} redirects to ...{sign_in_url}')
        return super().redirect_request(req, fp, code, msg, headers, newurl)

http_opener = urllib.request.build_opener(HTTPRedirectHandler)
http_opener.addheaders = [
    ('User-Agent', 'zglab (https://github.com/jwilk/zglab)'),
    ('Accept-Encoding', 'gzip'),
]

def wget(url):
    with http_opener.open(url) as fp:
        content_encoding = fp.getheader('Content-Encoding', 'identity')
        data = fp.read()
    if content_encoding == 'gzip':
        return gzip.decompress(data)
    elif content_encoding == 'identity':
        return data
    else:
        raise RuntimeError(f'unexpected Content-Encoding: {content_encoding!r}')

def wget_json(url):
    data = wget(url)
    return json.loads(data, object_hook=Dict)

class Dict(dict):
    __getattr__ = dict.__getitem__

def fmt_date(d):
    d = re.sub(r'[.]\d+', '', d)
    d = d.replace('T', ' ')
    return d

def fmt_url(url):
    if sys.stdout.isatty():
        return re.sub('(.)', r'_\b\1', url)
    return url

def fmt_user(user, url):
    url = urllib.request.urljoin(url, user.path)
    return f'{user.name} <{fmt_url(url)}>'

def fmt_markdown(s):
    return s

def xmain():
    ap = argparse.ArgumentParser()
    ap.add_argument('url', metavar='URL')
    opts = ap.parse_args()
    opts.url, _ = urllib.parse.urldefrag(opts.url)
    if not re.fullmatch(r'.*/issues/[0-9]+', opts.url):
        ap.error('unsupported URL')
    author = None
    class HTMLParser(html.parser.HTMLParser):
        def handle_starttag(self, tag, attrs):
            nonlocal author
            if tag == 'a':
                attrs = dict(attrs)
                classes = attrs.get('class', '').split()
                if 'author-link' in classes:
                    userurl = urllib.request.urljoin(opts.url, attrs['href'])
                    username = attrs['data-name']
                    author = f'{username} <{fmt_url(userurl)}>'
    html_parser = HTMLParser()
    data = wget(opts.url)
    data = data.decode('UTF-8')
    html_parser.feed(data)
    html_parser.close()
    jurl = f'{opts.url}.json'
    data = wget_json(jurl)
    web_url = urllib.parse.urljoin(opts.url, data.web_url)
    print('Location:', fmt_url(web_url))
    if author:
        print('From:', author)
    print('Title:', data.title)
    try:
        data_type = data.type
    except KeyError:
        pass
    else:
        print('Type:', data_type)
    print('Date:', fmt_date(data.created_at))
    if data.updated_at != data.created_at:
        print('Update:', fmt_date(data.updated_at))
    if labels := [label.title for label in data.labels]:
        print('Labels:', *labels)
    print()
    print(fmt_markdown(data.description))
    jurl = f'{opts.url}/discussions.json'
    data = wget_json(jurl)
    for item in data:
        for note in item.notes:
            print()
            print('-' * text_width)
            print()
            if url := note.noteable_note_url:
                print('Location:', fmt_url(url))
            print('From:', fmt_user(note.author, url or jurl))
            print('Date:', fmt_date(note.created_at))
            if (note.updated_at is not None) and (note.updated_at != note.created_at):
                print('Update:', fmt_date(note.updated_at))
            print()
            print(fmt_markdown(note.note))

def find_command(command):
    if shutil.which(command):
        return command
    return None

@contextlib.contextmanager
def autopager(*, raw_control_chars=False):
    if not sys.stdout.isatty():
        yield
        return
    cmdline = (os.environ.get('PAGER')
        or find_command('pager')  # Debian:
        # https://www.debian.org/doc/debian-policy/ch-customized-programs.html#editors-and-pagers
        or 'more'  # POSIX:
        # https://pubs.opengroup.org/onlinepubs/007904975/utilities/man.html#tag_04_85_08
    )
    if cmdline == 'cat':
        yield
        return
    env = None
    if 'LESS' not in os.environ:
        env = dict(env or os.environ, LESS='-FXK')
    assert sys.stdout is sys.__stdout__
    try:
        with subprocess.Popen(cmdline, shell=True, stdin=subprocess.PIPE, env=env) as pager:
            sys.stdout = io.TextIOWrapper(pager.stdin,
                encoding=sys.__stdout__.encoding,
                errors=sys.__stdout__.errors,
                line_buffering=True,
            )
            sys.stdout.isatty = sys.stdout.writable
            try:
                yield
            finally:
                sys.stdout.close()
    finally:
        sys.stdout = sys.__stdout__
    if pager.returncode:
        raise RuntimeError('pager failed')

def main():
    try:
        with autopager():
            xmain()
    except BrokenPipeError:
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)
        signal.raise_signal(signal.SIGPIPE)
        raise

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
